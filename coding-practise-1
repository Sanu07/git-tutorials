Question : 1
Find character frequency in alphabetical order.

Given string is- “geekforgeeks”

Output – e4 f1 g2 k2 01 r1 s1.



import java.util.*;

public class Frequency {
    
    
    public static void main(String[] args)
    {
    String str="";
    findfrequency(str);
    }

    private static void findfrequency(String str) {
    
        Map<String,Integer> map=new TreeMap<String,Integer>();

        String arr[]=str.split("");
        if(arr[0]!="")
        {
        map.put(arr[0],1); 
        }
        
        int mapvalue=0;

        for(int i=1;i<arr.length;i++)
        {
            if(map.containsKey(arr[i]))
            {
                mapvalue=map.get(arr[i]);
                map.put(arr[i],mapvalue+1);
            }
            else
            map.put(arr[i],1);
        }

        System.out.println(map);
        
    }

}


====================================================================
Question : 2
Input an array and prints the second minimum in an array.
Example
Input:34,45,21,12,54,67,15
Output:15



import java.util.*;

public class SecondMin {
    
    
    public static void main(String[] args)
    {
        int arr[]={1,4,7,0,2};
        secondMin(arr);
    }

    private static void secondMin(int arr[]) {
    
        Arrays.sort(arr);
        System.out.println(arr[1]);
    
        
    }

}

====================================================================
Question : 3
Input an array and then print the repeating characters??
Example:
Input:1,3,23,11,44,3,23,2,3.
Output:3,23
====================================================================
import java.util.*;

public class REpeat {
    
    
    public static void main(String[] args)
    {
        int arr[]={1,4,7,0,2};
        repeat(arr);
    }

    private static void repeat(int arr[]) {
    
        Set<Integer> set=new HashSet<Integer>();
        for(int i=0;i<arr.length;i++)
        {
            for(int j=i+1;j<arr.length;j++)
            {
                if(arr[i]==arr[j])
                {
                    set.add(arr[i]);
                }
            }
        }   
        System.out.println(set);
        
    }

}
===================================================================================================================================
Question 10/11/1

Print the following pattern for n number of rows;

i/p :n=5;

o/p:
        *
      * *
    * * *
  * * * *
* * * * * 

public class Pattern3 {
    
    
    public static void main(String[] args)
    {           
                int size=5;
                repeat(size);
    }

    private static void repeat(int size) {
    
for(int k=0;k<size;k++) {
            for(int i=0;i<size-k-1;i++)
                System.out.print(" ");
            for(int j=size-1;j>=size-k-1;j--)
                System.out.print("*");
            System.out.println();
            }
        
    }

        

        
    }


Question 10/11/2
check whether binary representation of an integer no is palindrome or not
Eg :
I/P : 5
O/P : "Pallindrome"
5 -> Binary rep : 101


public class Binary {

    public static void main(String[] args) {
        // TODO Auto-generated method stub

        int n=5;
        StringBuffer sb=new StringBuffer();

        int val=0;
        while(n>0)
        {
            val= n%2;
            n=n/2;
            sb= sb.append(val);
        }
        System.out.println(sb);
        System.out.println(sb.reverse());
        if(sb.toString().equals(sb.reverse().toString()))
        {
            System.out.println("Palindrome");
        }
        else
            System.out.println("No Palindrome");
    }
}


Question 10/11/3
WAP to replace every alphabetical character with its next 3rd character. Characters can be in lower or uppercase.
a -> d    A -> D
b -> e    B -> E
.
.
x -> a
y -> b
z -> c
Input : happy 
O/P : kdssb


public class Replace {

    public static void main(String[] args) {
        // TODO Auto-generated method stub

String s="happy";

for(int i=0;i<s.length();i++) {
     char c=(char) ((s.charAt(i)+3));
     System.out.print(c);
    }
}

}
=================================================================================
public class Decoding1 {
    public static void main(String[] args) {
        String encoded = "HAPPY";
        StringBuffer sb = new StringBuffer();
        int x = "X".charAt(0);
        System.out.println(x);
        System.out.println();
        for(int i = 0; i < encoded.length(); i++) {
            if((encoded.charAt(i) >= 65 
                    && encoded.charAt(i) < 88 )
                    || (encoded.charAt(i) >= 97
                    &&  encoded.charAt(i)<120 )) {
                char c = (char) (encoded.charAt(i) + 3);
                sb.append(String.valueOf(c));
            } else {
                char c = (char) (encoded.charAt(i) - 23);
                sb.append(String.valueOf(c));
            }
        }
        System.out.println(sb.toString());
    }
}
=============================================================================
public class BinaryPallindrome {
    public static void main(String[] args) {
        int n = 127;
        String binaryString = Integer.toBinaryString(n);
        System.out.println(binaryString);
        int i = 0;
        boolean flag = true;
        while(i <= binaryString.length()-i-1) {
            if(binaryString.charAt(i) == binaryString.charAt(binaryString.length() - i -1)) {
                i++;
                continue;
            } else {
                flag = false;
                break;
            }
        }
        if(flag) {
            System.out.println("Pallindrome");
        }else {
            System.out.println("Not Pallindrome");
        }
    }
}
============================================================================
7:40 pm - 8:25 pm

Question 11/11/1
Remove all the special characters and change the succeeding character to its uppercase.
Eg 1 : I/P -> this?is?variable
     O/P -> thisIsVariable
Eg 2 : I/P -> this-is-variable2
       O/P -> thisIsVariable2
       First replace the special character with empty string and then convert the succeeding letter to uppercase.
     Final output should contain only alphanumeric characters.
     
public class SpecialCharacers {
    public static void main(String[] args) {
        String encoded = "?-????";

        StringBuffer sb=new StringBuffer();
        int flag=0;

        for(int i=0;i<encoded.length();i++)
        {
            if((encoded.charAt(i)>=65 && encoded.charAt(i)<=90) ||(encoded.charAt(i)>=97 && encoded.charAt(i)<=122))
            {
                
                if(flag==1)
                {sb=sb.append(encoded.substring(i, i+1).toUpperCase());flag=0;}
                else
                {sb=sb.append(encoded.substring(i, i+1));}


            }
            else
            flag=1;
        }
        

        System.out.println(sb.toString());
        
    }
}




Question 11/11/2
Reverse the string according to its words
Input: programming is fun
Output: fun is programming

public class ReverseString {
    public static void main(String[] args) {
        String encoded = "program fun is";

        String arr[]=encoded.split(" ");
        StringBuffer sb=new StringBuffer("");
        StringBuffer sbresult=new StringBuffer();
        for(int i=arr.length-1;i>=0;i--)
        {
            sbresult= sb.append(arr[i]).append(" ");     
        }
        System.out.println(sbresult.replace(sbresult.length()-1, sbresult.length(),""));
        
    }
}


Question 11/11/3
Given a date(String) in DD-MMM-YYYY format, you need to print the date for previous year next month and next day.
Input: Given date 13-JAN-1982
Output: 14-FEB-1981


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

public class DateFormatchange  {
        public static void main(String[] args) {
            
            String date ="13-JAN-1982";
            try {
                SimpleDateFormat format= new SimpleDateFormat("dd-MMM-yyyy");
                Date inputdate=format.parse(date);
                System.out.println(inputdate);
                Calendar cal=Calendar.getInstance();
                cal.setTime(inputdate);
                cal.add(Calendar.DATE,1);
                cal.add(Calendar.YEAR,-1);
                System.out.println(format.format(cal.getTime()));
                
            } catch (ParseException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            
        }
    }
========================================================================================
given a string find the longest substring having at most 2 unique characters, if there are multiple longest substrings return them all. Ex: given string “helloworld” then output should contain { “ell”,“llo”,“owo”}

public class LongestSubstring {
    public static void main(String[] args) {
        List<String> sub = new ArrayList<String>();
        String s = "helloworld";
        String sArr[] = s.split("");
        StringBuffer sb = new StringBuffer();
        int count = 0;
        int max = Integer.MIN_VALUE;
        for(int i = 0; i < sArr.length; i++) {
            for(int j = i; j < sArr.length; j++) {
                if(!sb.toString().contains(sArr[j])) {
                    count ++;
                }
                if(count < 3) {
                    sb.append(sArr[j]);
                }else {
                    sub.add(sb.toString());
                    max = sb.length() > max ? sb.length() : max;
                    sb = new StringBuffer();
                    count = 0;
                    break;
                }
            }
        }
        System.out.println(sub);
        for(String res : sub) {
            if(res.length() == max) {
                System.out.println(res);
            }
        }
    }
}

[he, ell, llo, lo, owo, wo, or, rl]
==========================================================================================
given an sorted array of size n and there is another array of 2n also contain elements in sorted order . merge these sorted arrays and remove duplicates if any .the resultant array should also be in sorted order.
Eg : a1[] = {1,2,3,5}
a2[] = {2,4,5,6,7,9,10,15}
output : {1,2,3,4,5,6,7,9,10,15}


public class ArraySorting  {
    public static void main(String[] args) {
        
        int arr[]={1,2,3,5};
        int brr[]={2,4,5,6,7,9,10,15};
        
        int result[]=new int[arr.length+brr.length];
      for(int i=0;i<arr.length;i++)
          result[i]=arr[i];
      for(int j=0;j<brr.length;j++)
          result[arr.length+j]=brr[j];
      Arrays.sort(result);
      
      Set<Integer> set=new HashSet<Integer>();
      for(int i : result)
      set.add(i);
      System.out.println(set);
        
    }
}

==========================================================================================
WAP to find the sum of HCF(GCD) and LCM of two numbers.
==========================================================================================
public class LCM  {
    public static void main(String[] args) {
        
        int a=12;int b=15;
       int lcm=0;
        int max=0;
        int small=a<b?a:b;

       for(int i=1; i<=small;i++)
       {
            if(a%i==0 && b%i==0)
                max=i;
       }
       int hcf=max;
       lcm= a*b/hcf;
       System.out.println(lcm +" "+hcf);
        
    }
}

============================================================

Common kuch sorting/searching algorithm dekh lena.
Matrix k ek do online programs
Immutable
Singleton/Factory

2. Given a string, find out the words that have length even and greater than equal to 4 (e.g. 4, 6, 8, …) and split such words from the middle and output the string.
e.g. Given String : “Hello I am Mike Saunders”
Output: “Hello I am Mi ke Saun ders”
=================================================================================
3.) sort the array element based on Dictionary.
Input :- 10,20,30,100,200,300.
output :- 10,100,20,200,30,300. //////////

public class SortDictionary {
    public static void main(String[] args) {
        int a[] = { 10, 20, 30, 100, 200, 300 };
        for(int i = 0; i < a.length-1; ++i) {
            for (int j = i + 1; j < a.length; ++j) {
                if (String.valueOf(a[i]).compareTo(String.valueOf(a[j])) > 0) {
                    // swap words[i] with words[j[
                    int temp = a[i];
                    a[i] = a[j];
                    a[j] = temp;
                }
            }
        }
        for(int i = 0; i < a.length; i++) {
            System.out.println(a[i]);
        }
    }
}
===================================================================================

Given an square matrix, turn it by 90 degrees in anti-clockwise direction without using any extra space.
Input
 1  2  3
 4  5  6
 7  8  9

Output:
 3  6  9 
 2  5  8 
 1  4  7

for(i = 0; i<n ;i++) {
    for(j=0 ; j<n; j++) {
    temp = a[i][j];
    a[i][j] = a[n-j-1][i]
    a[n-j-1][i] = temp
    }
}

R1a. Given a string , write a in place function to title case every first letter of words in string.

input: “I love programming”

output: “I Love Programming”


R1b. Write a function to sort a matrix with respect to second column elements.

input: 
7 5 2 8

2 6 5 9

1 1 4 2

0 3 5 9

output: 
1 1 4 2

0 3 5 9

7 5 2 8

2 6 5 9

treemap use karke key mei [i] index daal denge aur value mei matrix value.. key ko iterate karke usi ith row ko print karenge


R2a. Write a function to remove vowels from a input string, without using extra memory(in

place code)

input : “My name is Varun Sharma”

output : “My nm s Vrn Shrm”

=====================
R2b. Given a 2D matrix whose every row is sorted, write a function to output 1D array with

all elements in sorted arrangement from matrix with no duplicates

input: 
4 5 12 20

2 6 5 90

1 2 4 6

0 3 5 9

output: 0 1 2 3 4 5 6 9 12 20 90
=================================
R2c. Write a function to output all possible subsets with zero sum from 1D array.

input: {-2,-3,-9, 9, 5, 10, 23}

output: 
-2 -3 -9 9 5

-2 -3 5

-9 9
====================================
R3a. Given a string check if it is Pangram or not. A pangram is a sentence containing every

letter in the English Alphabet.

Input: “The quick brown fox jumps over the lazy dog ”

output: TRUE
======================================
R3b. Given a 2D array, find the maximum sum submatrix in it with a given size.

Input : matrix[n][n] = 
{{1, 1, 1, 1, 1},

{2, 2, 2, 2, 2},
{3, 8, 6, 7, 3},

{4, 4, 4, 4, 4},

{5, 5, 5, 5, 5},

size : 3


output: Maximum sum 3 x 3 matrix is

8 6 7

4 4 4

5 5 5
======================================
Given a sorted array, write a function to perform a dictionary sort on it without

converting them into a string

input: {1, 2, 3, 15, 22, 30, 100, 110, 150, 160, 250, 300}

output: {1, 100, 110, 15, 150, 160, 2, 22, 250, 3, 30, 300}
======================================
1 Qs – Given an unsorted list of repeated elements in an array, Find the element with maximum frequency.
2 Qs- Given a string containing characters and brackets, find if the brackets are paired in the string.
=================================================
3 Qs- (Little Tricky) Given a set of integers, find the third maximum sum of two elements from the set.
For ex – Array -> 3,6,2,7,8,19,13,5
Max Sum of two elements is – 19 + 13 = 32 , So u need to find the third maximum sum.
public class ThirdMax {
    public static void main(String[] args) {
        int a[] = {2, 3, 4, 5, 6, 8}; // no. of combinations (n*(n-1))/2
        if(a.length < 3) {
            return;
        }
        List<Integer> sumList = new ArrayList<Integer>();
        Arrays.sort(a);
        for(int i = 0; i < a.length-1; i++) {
            for(int j = i+1; j < a.length; j++) {
                sumList.add(a[i]+a[j]);
            }
        }
        Collections.sort(sumList);
        System.out.println(sumList);
        System.out.println(sumList.get(sumList.size()-3));
    }
}
===============================================
2) Find all common elements in given 3 sorted arrays.

public class CommonElem {
    public static void main(String[] args) {
        int a[] = { 1, 2, 3, 4, 5, 6 };
        int b[] = { 1, 22, 33, 4, 5, 6 };
        int c[] = { 1, 2, 33, 4, 5, 6 };
        List<Integer> aL = list(a);
        List<Integer> bL = list(b);
        List<Integer> cL = list(c);
        aL.retainAll(bL);
        aL.retainAll(cL);
        System.out.println(aL);
    }
    
    private static List<Integer> list(int a[]){
        List<Integer> list = new ArrayList<Integer>();
        for(Integer i : a ) {
            list.add(i);
        }
        return list;
    }
}
===================================================

1) Given a string ,find the longest sub-string with all distinct characters in it.If there are multiple such strings,print them all.
5) Asked to write a program to print the following pattern , if n=5:
    5 5 5 5 5
    5 4 4 4 4
    5 4 3 3 3
    5 4 3 2 2
    5 4 3 2 1 
public class Pattern4 {
    public static void main(String[] args) {
        int n = 5;
        for(int i = 0; i < n; i++) {
            int k = n - i;
            for(int j = n; j >= n-i; j--) {
                System.out.print(j + " ");
            }
            
              for(int j = 1; j < n- i ; j++) { 
                  System.out.print(n - i +  " "); 
                  
              }
             
            System.out.println();
        }
    }
}
================================================================================
Q2. Write a Function to check if the given string contains the given number of unique characters (You should ignore case of character so ‘R’ & ‘r’ should be counted as same character.).

Input  :-  String :  “NagarroisBestSoftwareCompany”.
       N = 17
Output :- True or False 

Q3: A statement is given, which consist of words, you need to find the words which occurs the most.

eg: Input :  How do you do ?

Output : do (2 occurrences)

Q2: Two arrays are given . Second array is exactly similar as the first one, except one additional  element . We need to find that additional element.


3.) sort the array element based on Dictionary.
Input :- 10,20,30,100,200,300.
output :- 10,100,20,200,30,300. //////////

public class SortDictionary {
    public static void main(String[] args) {
        int a[] = { 10, 20, 30, 100, 200, 300 };
        for(int i = 0; i < a.length-1; ++i) {
            for (int j = i + 1; j < a.length; ++j) {
                if (String.valueOf(a[i]).compareTo(String.valueOf(a[j])) > 0) {
                    // swap words[i] with words[j]
                    int temp = a[i];
                    a[i] = a[j];
                    a[j] = temp;
                }
            }
        }
        for(int i = 0; i < a.length; i++) {
            System.out.println(a[i]);
        }
    }
}
=======================================================================================================================================================
Spring

1.what is dependency Injection?
2.what is IoC design pattern?
3.Create a simple Spring standalone application which prints 2 different Employees
4.Employee1 : using setter Injection
5.Employee2 : using Constructor Injection
6. Difference between PUT, POST, GET, DELETE
7. create a basic spring application with CRUD functionalities using Hibernate.

======================================================================================================================================
Hibernate

1. **** what is N+1 problem in hibernate? How can you resolve it? --> very important
2. difference between load and get
3. different states of the object and the flow diag for different states -> transient,persist,detached
4. How to implement inheritance in hibernate? what are the 3 different strategies?
5. Decribe session factory in hibernate. How do you create session factory? How can we create multiple session factory?
 How can you connect multiple database in hibernate?
6. Difference between hibernate and JPA.
7. List of some important annotations in hibernate and their uses.
8. Mappings in hibernate with one example in each case and how will you implement the same : 
    One to One
    One to many
    Many to One
    Many to Many
9. cascade attribute in hibernate.
10. difference between update and merge in hibernate
11. How many different ways you can create the primary key
12. Eager and Lazy Fetch difference
13. What is parameter binding and SQL injection?
14. What are the different levels of cache does hibernate support and how do u implement them?
15. Go through Projections, Criteria API, Named Queries, Restrictions
16. Implement 1st level 2nd level cache in hibernate 
===============================================================================================================

Core Java:
1. difference between sleep and wait
2. different types of design patterns : Structural, behaviourial, Creational.. 2 types from each category
3. Use of serial version UID
4. How to implement Immutable Class?
5. String class implements which design pattern?
6. Implement ArrayList of your own.
7. Collection related questions from Google
8. Internal structure of HashMap.
9. Internal Structure of ArrayList, Iterator.
10. Serialization and Deserialization
    Which of the below variables will be serialized :
    static int a -> will not be serialized because static keyword indicates that variable belongs to class not to 
                    object and only objects can be serialized.
    transient int a -> tranient keyword does not allow a variable to be serialized.
    What will be the default values of the variables that are not serialized?
11. little bit knowledge on JAVA 8 features. Not mandatory..
12. How to implement Singleton design pattern?
13. Name some common scenarios where u found singleton design pattern and factory design pattern.
14. Inheritance vs Composition.
15. Composition - Aggregation - Association
16. Runtime polymorphism and Compile time polymorphism with example.
17. what are the different ways you can create an object? There are 5 different ways.
18. why do you think 'set' does not contain get() methods as list?
19. wild card and <? extends [Parent Class]>
20. what is the concept of caching
================================================================================================================================= 




Find character frequency in alphabetical order.
Given string is- “geekforgeeks”
Output – e4 f1 g2 k2 01 r1 s1.

given a string consisting of various words . First reverse the whole string then reverse each and every words of it.
Example : I/P -> I love Football
          O/P -> llabtooF evol I
        
Started 9:10

Given two arrays. First merge those two arrays and then remove all the duplicates from two arrays


      class Frequency{

    public static void main(String[] args) {

        String str="geeksforgeeks";
        int count=0;

        Map<String, Integer> map=new TreeMap<String, Integer>();

        String arr[] = str.split("");

        map.put(arr[0],1);

        for(String s:arr)
        {
            if(s.equals(map.containsKey(s))){
                count=map.get(s);
                count++;
                map.put(s,count);
                count=0;
            }
            else
            {
                map.put(s,1);
            }
        }
        
    }
}



class Reverse
{

    private static String reversestring(String str)
    {   
        String s = "";
        for(int i = str.length() - 1; i >= 0; i--)
        {   
         s += str.substring(i,i+1); 
        }
        return s;
    }
    public static void main(String[] args) {

        System.out.println(reversestring("i love football"));
    
    }
}
    
          
 import java.util.Arrays; 
import java.util.Set;
import java.util.HashSet;
class RemoveDuplicate{
    public static void main(String[] args) {
        int[] arr1={1,2,3,4,5};
        int[] arr2={1,2,3,4,5};
        int[] arr3=new int[arr1.length+arr2.length];
            int i;
            for(i=0;i<arr1.length;i++)
                arr3[i]=arr1[i];
            
            for(int j=0;j<arr2.length;j++)
                arr3[i+j]=arr2[j];
        System.out.println(Arrays.toString(arr3));

        Set<Integer> set=new HashSet<Integer>();
        for(int a:arr3)
        {
            set.add(a);
        }
            System.out.println(set);
    
    }
}
===================================================================================================
You have given an integer array of size N. Array contains numbers from 1 to N-1 but a couple of numbers are missing in an array which also contains duplicates.

Write a Java program to print the missing number from the sequence.

For example, if given array is {1, 1, 2, 3, 5, 5, 7, 9, 9, 9} then it has length 10 and contains a number from 1 to 9. In this case, missing numbers are 4, 6, and 8
Finally find the GCD of the array of the missing numbers.

public class MissingNumbers{
    
    private static int[] findmissing(int[] arr)
    {
                int len=arr.length;
            List<Integer> list1=new ArrayList<Integer>();
            List<Integer> list2=new ArrayList<Integer>();
            Arrays.sort(arr);
            for(int i:arr)
                list1.add(i);
                for(int i=1;i<=len-1;i++) // check   for(int i=1;i<arr[arr.length-1];i++)
                {
                                if(list1.contains(i)){
                                    continue;
                                }
                                else
                                    list2.add(i);

                }

            Integer arrresult[] = new Integer[list2.size()];
            arrresult=list2.toArray(arrresult);
            int result[]=new int[list2.size()];

            for(int i=0;i<list2.size();i++)
              result[i]=arrresult[i].intValue();
            return result;
    }

    private static int gcd(int a, int b)
    {
        if(a==0)
            return b;

        else
            return  gcd(b%a,a);
        
    }
    public static void main(String[] args) {
        int arr1[]={1,1,1,1,1,1,1,1,2};
        int arr2[]=findmissing(arr1);
        System.out.println(Arrays.toString(arr2));
        int gcdres = 0;
        if(arr2.length > 1) {
            gcdres = gcd(arr2[0],arr2[1]);
            for(int i=1;i<arr2.length-1;i++)
            {
                gcdres=gcd(gcdres,arr2[i+1]);
            }
            System.out.println("GCD : "+gcdres);
        }else if (arr2.length == 1) {
            System.out.println(1);
            return;
        }
    }
}

====================================================================================

Remove Duplicates from a String.
I/P -> geeksforgeeks
O/P -> geksfor

import java.util.*;

class DuplicateRemove{
    
    private static String duplicateremove(String str){
        String[] arr=str.split("");
        String res[]={};
        Set<String> set=new LinkedHashSet<String>(Arrays.asList(arr));

        res=set.toArray(res);
        String result="";
        for(String s:res)
            result+=s;
        return result;
    }

    public static void main(String[] args) {
        String str="geeksforgeeks";
        System.out.println(duplicateremove(str));
    }
}

====================================================================================
Find all the permutations of a given String.
Permutation formula :

When no duplicate characters are present
n!/(n-r)! where 'n' is the total number of alphabets. 'r' total number of alphabets that are to be arranged
Ex: xyz -> total no of alphabets is 3.
            no of alphabets to be arranged is 3
            3!/(3-3)! Note: 0! = 1

When duplicate characters are present     
Ex: xxyzaaa ->  Formula :   7!/((7-7)! * 2! * 3!*)
                            m!/((m-n)! * p! * q!)
                            
                            m-> total number of alphabets
                            n-> total number of alphabets to be arranged
                            p-> number of duplicate 'x'
                            q-> number of duplicate 'a'
===================================================================================

import java.util.*;

class Permutation{
    
    private static int repeatfreq(String str){
        
        String arr[]=str.split("");
        Map<String, Integer> map=new HashMap<String,Integer>();
        int mapvalue=0;
        if(arr.length>=1)
        {
            map.put(arr[0],0);

            for(String a:arr)
            {
                if(map.containsKey(a))
                {
                    mapvalue=map.get(a);
                    map.put(a,mapvalue+1);
                }
                else
                    map.put(a,1);
            }
        }

                    System.out.println(map);

         int permutationres=factorial(str.length());
         System.out.println(str.length()+" "+factorial(str.length()));

         System.out.println(permutationres);

         for(Integer r:map.values())
         {
            

            permutationres=permutationres/factorial(r);
            System.out.println(factorial(r));
             }
         return permutationres;
        }

        private static int factorial(int n)
        {
            return (n==0||n==1)?1:n*factorial(n-1); // khatarnak super like
        }

    public static void main(String[] args) {
        String str="xxyzaaa";
        System.out.println(repeatfreq(str));


    }
}
==========================================================================================
=============================================
a b c d e f g h i j k l m n o p q r s t u v w x y z
z y x w v u t s r q p o n m l k j i h g f e d c b a
Consider the above transformation. a should be replaced with z, b with y and vice versa
I/P -> google
O/P -> tlltov

Ye logic khi nhi milega 

class Transformation{
    private static String transform(String str)
    {
        int val=0;
        char res[]=new char[str.length()];
        for(int i=0;i<str.length();i++){

                val=(int)str.charAt(i);
                if(val+25>122) {
                    
                    val=val-97;
                    val=122-val;
                    res[i]=(char)val;
                }
                else
                    res[i]=(char)(val+25);
        }
        
        return String.valueOf(res);
    }
    public static void main(String[] args) {
        System.out.println(transform("abcdefghijklmnopqrstuvwxyz"));
    }
}


===============================================
Transpose the square matrix
1 2 3       1 4 7
4 5 6  ->   2 5 8
7 8 9       3 6 9

class Transpose{
    

    public static void main(String[] args) {
        
        int arr[][] = {{1,2,3},{4,5,6},{7,8,9}};
        int arrres[][]=new int[arr.length][arr.length];
        for(int[] row:arr)
        {
            for(int col:row){
                System.out.println(col);
            }
        }
        System.out.println("in array");
        for(int i=0;i<arr.length;i++)
        {
            for(int j=0;j<arr.length;j++)
            {
                arrres[i][j]=arr[j][i];

                }
            }
            
        for(int[] row:arrres)
        {
            for(int col:row){
                System.out.println(col);
            }
        }
        
            
    }
}

==================================================
Find the count of the longest increasing sequence in an array
{3,4,5,9,2,3,4,5,6,4,8}
The longest increasing sequence is 2,3,4,5,6
Ans will be 5
=================================================
started at 22:16
===============================================================
Write a program to get the first non repeating alphabet from the given string by the user

For example:

string = abcba

Output : c

string = abcdecbae

Output : d

string =naveen

Output : a


public class NonRepeated{

    private static String findelement(String str){
    
        for(int i=0;i<str.length();i++){
            
            if((str.substring(i+1)).contains(str.subSequence(i, i+1))) {
                str=(str.replace(str.charAt(i), ' '));
            }
        }
        return str;
    }

    public static void main(String[] args) {
        System.out.println("Character is : "+findelement("aavv").trim());
    }
}
----------------------------------------------------------
public class NonRepeated{

    private static char findelement(String str){
        char s='0';
        for(int i=0;i<str.length();i++){
            if(str.lastIndexOf(str.charAt(i)) == str.indexOf(str.charAt(i))) {
                s = str.charAt(i);
                break;
            }
        }
        return s;
    }

    public static void main(String[] args) {
        System.out.println("Character is : "+findelement("abcdefdabc"));
    }
}

   
==============================================================
Write a program to find out the combination of an element of each array gives a result 0. if for any number in array1, the result does not evaluate to 0,
leave that number.

For example: you have 3 arrays

array 1: {2,1,4,7}
array 2: {3,-3,-8,0}
array 3: {-1,-4,-7,6}


Output:

pairs =

{2,-8,6} //explanation : 2 from array1, -8 from array2, 6 from array3
{1,3,-4}
{4,-3,-1}
{7,0,-7} 

import java.util.ArrayList;
import java.util.List;

public class ZeroCombonation{

    private static List<String> zerocomb(int arr1[],int arr2[],int arr3[]){

        String res=null;
        List<String> list=new ArrayList<String>();
        for(int i=0;i<arr1.length;i++){
            for(int j=0;j<arr2.length;j++){
                for(int k=0;k<arr3.length;k++){

                    if(arr1[i]+arr2[j]+arr3[k]==0){
                        
                        res=arr1[i]+", "+arr2[j]+", "+arr3[k];
                        list.add(res);
                    }
                }
            }
        }
        return list;
    }

    public static void main(String[] args) {
        int arr1[]= {2,1,4,7};
        int arr2[]= {3,-3,-8,0};
        int arr3[]= {-1,-4,-7,6};
        List<String> list=zerocomb(arr1,arr2,arr3);
        list.forEach(str -> System.out.println(str));

    }
}

=================================================================
a function input(int[] array) was given and we had to enter any number and the entered no./should convert into absolute no like 4578, 6789 , 1234 etc means the no should convert into/incresing nos
example : array = {1, 3, 4, 2}
the o/p should be 1234
example array = {6, 8, 2, 5, 9}
o/p should be = 25689
================================================================

import java.util.Arrays;

public class Orderset{

    private static int order(int arr1[]){
        String str="";int number=0;
        Arrays.sort(arr1);
        for (int i : arr1) {
            str+=String.valueOf(i);
        }
        number=Integer.parseInt(str);
        return number;
    }

    public static void main(String[] args) {
        int arr1[]= {2,1,4,7};
        
        System.out.println("Number "+order(arr1));
    }
}


Given an array of DISTINCT elements, rearrange the elements of array in zig-zag fashion in O(n) time. The converted array should be in form a < b > c < d > e < f.

Input: arr[] = {4, 3, 7, 8, 6, 2, 1}
Output: arr[] = {3, 7, 4, 8, 2, 6, 1} // 1 7 3 4 6 2 8

public class ZigZagFashionedArray {
    public static void main(String[] args) {
        int inputArray[] = {4, 3, 7, 8, 6, 2, 1}; //{1, 7, 2, 8, 3, 6, 4} {4, 8, 3, 7, 2, 6, 1} 
        int outputArray[] = zigZagArrangement(inputArray);
        for(int element : outputArray) {
            System.out.println(element);
        }
    }
    private static int[] zigZagArrangement(int []inputArray) {
        Arrays.sort(inputArray);
        int outputArray[] = new int[inputArray.length];
        int incrementCounter = 0;
        int decrementcounter = inputArray.length - 1;
        for(int i = 0; i < inputArray.length; i++) { //O(n) complexity
            if(i % 2 == 0) {
                outputArray[i] = inputArray[incrementCounter++];
            } else {
                outputArray[i] = inputArray[decrementcounter--];
            }
        }
        return outputArray;
    }
}
===================================================================================


Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). Palindrome string: A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S. Incase of conflict, return the substring which occurs first ( with the least starting index ).

NOTE: Required Time Complexity O(n2).

Input:
The first line of input consists number of the testcases. The following T lines consist of a string each.

Output:
In each separate line print the longest palindrome of the string given in the respective test case.

Constraints:
1 ≤ T ≤ 100
1 ≤ Str Length ≤ 104

Example:
Input:
1
aaaabbaa

Output:
aabbaa

Explanation:
Testcase 1: The longest palindrome string present in the given string is "aabbaa".


public class LargestPallindrome {
    public static void main(String[] args) {
        System.out.println(largestPallindrome("abcde"));
    }

    private static String largestPallindrome(String inputString) {
        int max = 0;
        String largestPallindrome = "";
        for(int i = 0; i < inputString.length(); i++) {
            StringBuffer firstPart = new StringBuffer(inputString.substring(0,i+1));
            StringBuffer secondPart = new StringBuffer(inputString.substring(i));
            //System.out.println("First part :: " + firstPart);
            //System.out.println("Second part :: " + secondPart);
            if(firstPart.toString().equals(firstPart.reverse().toString())) {
                if(firstPart.length() > max) {
                    largestPallindrome = firstPart.toString();
                    max = firstPart.length();
                }
                
                //System.out.println("1 :: " + firstPart);
            }
            if(secondPart.toString().equals(secondPart.reverse().toString())) {
                if(secondPart.length() > max) {
                    largestPallindrome = secondPart.toString();
                    max = secondPart.length();
                }
            }
        }
        return largestPallindrome;
    }
}
===============================================================================================

Q3.WAP to check if a String contains only digits.
public class CheckPresenceOfOnlyDigits {
    public static void main(String[] args) {
        System.out.println(doesContainAllDigits(""));
    }

    private static String doesContainAllDigits(String inputString) {
        int count = 0;
        if(inputString.length() <= 0) {
            return "NO INPUT";
        }
        for(int i = 0; i < inputString.length(); i++) {     //O(n) complexity
            if(Character.isDigit(inputString.charAt(i))) {
                count ++;
            } else {
                count = -1;
                break;
            }
        }
        if(inputString.length() == count) {
            return "YES";
        } else {
            return "NO";
        }
    }
}

================================================================================================
Transpose a 2D array
I/P : 1 2 3
      4 5 6
      7 8 9

O/P:  1 4 7
      2 5 8
      3 6 9
public class Transpose1 {
    
    public static void main(String[] args) {
        int arr[][]= {{1,2,3},{4,5,6},{7,8,9}};
        int temp[][] =new int[arr.length][arr.length];
        for(int i=0;i<arr.length;i++) {
            for(int j=0;j<arr.length;j++) {
                System.out.println(i+" "+j);
                
                temp[i][j]=arr[j][i];
                
            }
        }
        for(int i=0;i<arr.length;i++) {
            for(int j=0;j<arr.length;j++) {
                
                System.out.print(temp[i][j]+" ");
            }
            System.out.println();
        }
    }
}

Find the GCD and LCM of 10 numbers in an array
1 2 3 4 5 6 7 8 9 10

public class GCD {
    
    public static void main(String[] args) {
        
        int arr[]= {98,56};
        int gcd=0;
        int product=1;
        for(int i=0;i<arr.length;i++)
        {   
            product=product*arr[i];
            gcd=findgcd(arr[i],gcd);
            System.out.println(gcd);
        }
        
        System.out.println(product);
        System.out.println("GCD  : "+gcd);
        System.out.println("LCM :"+ product/gcd);
        
    }

    private static int findgcd(int a, int b) {
        if(a==0) return b;
        if(b==0) return a;
        if(a==b) return a;
        if(a>b) return findgcd(a-b, b);
        else return findgcd(b-a, a);
    }

}
============================================================================
public class LCMAndGCD {
    public static void main(String[] args) {
        int arr[] = {2, 3, 4};
        System.out.println(getGCD(arr));
    }

    private static int getGCD(int arr[]) {
        int gcd = arr[0];
        int lcm = arr[0];
        for(int i = 1; i < arr.length; i++) {
            gcd = findGCD(gcd, arr[i]);
            System.out.println("GCD :: " + gcd);
            lcm = (lcm * arr[i])/findGCD(lcm, arr[i]);
            System.out.println("LCM :: " + lcm);
        }
        System.out.println("Final GCD :: " + gcd);
        System.out.println("Final LCM :: " + lcm);
        return 0;
    }

    private static int findGCD(int a, int b) {
        if(b == 0) return a ;
        return findGCD(b, a % b);
    }
}
================================================================

Remove all the numbers/blank spaces and special characters from a string
I/P : all$ i#s w234ell
o/p : alliswell


public class RemoveSpace {
    
    public static void main(String[] args) {
        
        String str="all$ i#s w234ell";  
        StringBuffer sb=new StringBuffer(" ");
        for(int i=0;i<str.length();i++) {

            if(str.substring(i, i+1).matches("[a-zA-Z]{1}")) {
                sb=sb.append(str.charAt(i));
            }
        }
        System.out.println(sb.toString());
    }

}
